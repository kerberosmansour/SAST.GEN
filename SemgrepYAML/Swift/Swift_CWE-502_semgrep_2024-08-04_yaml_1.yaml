rules:
  - id: swift-deserialization-of-untrusted-data
    languages: [swift]
    message: "Potential deserialization of untrusted data"
    severity: ERROR
    patterns:
      # Match the use of JSONSerialization with potentially unsafe data
      - pattern: |
          let $OBJ = try JSONSerialization.jsonObject(with: Data($UNSAFE), options: .mutableContainers)
      - pattern: |
          let $OBJ = try JSONSerialization.jsonObject(with: $UNSAFE, options: .mutableContainers)
      # Match the use of PropertyListSerialization with potentially unsafe data
      - pattern: |
          let $OBJ = try PropertyListSerialization.propertyList(from: Data($UNSAFE), format: nil)
      - pattern: |
          let $OBJ = try PropertyListSerialization.propertyList(from: $UNSAFE, format: nil)
      # Match the use of NSKeyedUnarchiver with potentially unsafe data
      - pattern: |
          let $OBJ = try NSKeyedUnarchiver.unarchivedObject(ofClass: $CLASS, from: $UNSAFE)
      - pattern: |
          let $OBJ = try NSKeyedUnarchiver.unarchivedObject(ofClasses: $CLASSES, from: $UNSAFE)
      # Custom deserialization via NSCoder
      - pattern: |
          let $DECODER = $CLASS(forReadingWith: Data($UNSAFE))
      - pattern: |
          let $DECODER = $CLASS(forReadingWith: $UNSAFE)

    metadata:
      cwe: 502
      documentation: "https://cwe.mitre.org/data/definitions/502.html"
      examples:
        - |
          import Foundation

          struct User: Codable {
              var name: String
              var email: String
          }

          let jsonData = Data()
          let user = try JSONSerialization.jsonObject(with: jsonData, options: .mutableContainers) # ruleid: swift-deserialization-of-untrusted-data
        - |
          import Foundation

          struct User: Codable {
              var name: String
              var email: String
          }

          let plistData = Data()
          let user = try PropertyListSerialization.propertyList(from: plistData, format: nil) # ruleid: swift-deserialization-of-untrusted-data
        - |
          import Foundation

          let keyedUnarchiver = try NSKeyedUnarchiver.unarchivedObject(ofClass: MyClass.self, from: Data()) # ruleid: swift-deserialization-of-untrusted-data