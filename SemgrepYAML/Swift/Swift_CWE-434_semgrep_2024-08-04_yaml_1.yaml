rules:
  - id: unrestricted-file-upload
    languages: [swift]
    message: "Unrestricted Upload of File with Dangerous Type (CWE-434)"
    severity: ERROR
    patterns:
      - pattern-either:
          # Vapor framework - checking filename extensions
          - pattern: |
              func uploadHandler(_ req: Request) throws -> EventLoopFuture<String> {
                  let data = try req.content.decode(FileUpload.self)
                  if ![".jpg", ".png", ".gif"].contains(data.filename.fileExtension) {
                      throw Abort(.badRequest, reason: "Invalid file type")
                  }
                  // code to save file
              }
          # Vapor framework - missing file type validation
          - pattern: |
              func uploadHandler(_ req: Request) throws -> EventLoopFuture<String> {
                  let data = try req.content.decode(FileUpload.self)
                  // Missing file type validation
                  // code to save file
              }
          # Kitura framework - checking filename extensions
          - pattern: |
              router.post("/upload") { request, response, next in
                  guard let files = request.files, files.count > 0 else {
                      response.status(.badRequest)
                      return next()
                  }
                  for file in files {
                      guard [".jpg", ".png", ".gif"].contains(file.type) else {
                          response.status(.badRequest).send("Invalid file type")
                          return next()
                      }
                      // code to save file
                  }
                  response.status(.OK)
                  next()
              }
          # Kitura framework - missing file type validation
          - pattern: |
              router.post("/upload") { request, response, next in
                  guard let files = request.files, files.count > 0 else {
                      response.status(.badRequest)
                      return next()
                  }
                  // Missing file type validation
                  for file in files {
                      // code to save file
                  }
                  response.status(.OK)
                  next()
              }